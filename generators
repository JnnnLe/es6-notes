GENERATORS + (for of loops)

Note: .map and other array helpers do NOT work on generators, must use for-of loop again

  a fn that can be entered and exited many times

  syntax:
    function *shopping() || function* shopping() {
      ....
    }

    (preferred)
    function* shopping() {
      //stuff on the sidewalk

      //walking down the side walk

      //go into the store with cash
      const stuffFromStore = yield 'cash';

      //walking back home
      return stuffFromStore
    }

    (crucial const && needed to be envoke with next)
    const gen = shopping(); //does NOT envoke fn

      //gen.next() ==> {'done': false} //leaving our house
      //walks into store
      //buys stuff
      
      //gen.next(groceries) ==> {'done': true}  //leaving the store

    

  **** When using generators with for-in loops, it can iterate over wildly data structures, not just [] || {} ****

    iterator delegation means: you can iterate over a generater within a generator by using yield* `generatorConstFnName`


  Symbol.Iterator - special object, tells the for-of loop what ot iterate
    //can be use in lue of value of generator

    (as a method inside of object)
    const engineeringTeam = {
      lead: 'Jenn',
          ....

      *[Symbol.Iterator]() {
        yield this.content;
        for (let child of this.children) {
          yield* child;
        }
      }
    }




************

  Google: [
    generator delegation, 
    key interpolation  
  ]

  ***********

